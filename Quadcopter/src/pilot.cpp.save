#include "pilot.h"

/*
##############################################
#   Pilot functionnality                     #
#   Nicolas de Maubeuge and Vivien Billaud   #
#   October 2014                             #
#                                            #
##############################################
*/

//TODO : debug memory leak in pilot

// Some Software defines :

#define PCA_I2C_ADDRESS 0x40
#define PCA_FREQUENCY 50
#define PCA_PINBASE 300

#define ESC_MIN_PWM_VALUE 1
#define ESC_MAX_PWM_VALUE 2.1
#define GLOBAL_OFFSET 0.07

#define REFRESHING_PERIOD_DEFAULT 500000 // PWM refreshing default period
#define MAX_PWM 4096

// Some Hardware defines :

#define PCA_CHAN_1_PIN 0
#define PCA_CHAN_2_PIN 1
#define PCA_CHAN_3_PIN 2
#define PCA_CHAN_4_PIN 3
#define PCA_CHAN_5_PIN 4
#define PCA_CHAN_6_PIN 5
#define PCA_CHAN_7_PIN 6
#define PCA_CHAN_8_PIN 7
#define PCA_CHAN_9_PIN 8


// Some controlling defines :

#define LAND_TAKEOFF_CHAN 5 // Gear switch on radio
#define AUTO_MANUAL_CHAN 6 // Throttle hold on radio

#define YAW_CHAN 4
#define GAZ_CHAN 3
#define ROLL CHAN 1
#define PITCH_CHAN 2

// Global variables definitions :

pilotCommandsShared_t pilotCommandsShared;
pilotStateShared_t pilotStateShared;


int calcTicks(float impulseMs, int hertz)
{
	float cycleMs = 1000.0f / hertz;
	return (int)(MAX_PWM * impulseMs / cycleMs + 0.5f);
}

void armQuadcopter()
{
    printDebug("[i] Arming quadcopter motors....");

    pilotCommandsShared.chan1 = 0.5;
    pilotCommandsShared.chan2 = 0.5;
    pilotCommandsShared.chan3 = 0;
    pilotCommandsShared.chan4 = 0;

    writeCommands();

    sleep(3);

    // Returning command to idle state :

    pilotCommandsShared.chan1 = 0.5;
    pilotCommandsShared.chan2 = 0.5;
    pilotCommandsShared.chan3 = 0;
    pilotCommandsShared.chan4 = 0.5;

    writeCommands();

    printDebug("[i] Quadcopter motors are now armed !");
}

void disarmQuadcopter()
{
    printDebug("[i] Disarming quadcopter motors....");

    pilotCommandsShared.chan1 = 0.5;
    pilotCommandsShared.chan2 = 0.5;
    pilotCommandsShared.chan3 = 0;
    pilotCommandsShared.chan4 = 1;

    writeCommands();

    sleep(3);

        // Returning command to idle state :

    pilotCommandsShared.chan1 = 0.5;
    pilotCommandsShared.chan2 = 0.5;
    pilotCommandsShared.chan3 = 0;
    pilotCommandsShared.chan4 = 0.5;

    writeCommands();

    printDebug("[i] Quadcopter motors are now disarmed !");

}



void writeCommands()
{
    double pwm1, pwm2, pwm3, pwm4, pwm5, pwm6, pwm7, pwm8, pwm9;

    pthread_mutex_lock(&pilotCommandsShared.readWrite); // Locking mutex to prevent race conditions

    pwm1 = pilotCommandsShared.chan1*(ESC_MAX_PWM_VALUE - ESC_MIN_PWM_VALUE) + ESC_MIN_PWM_VALUE + GLOBAL_OFFSET;
    pwm2 = pilotCommandsShared.chan2*(ESC_MAX_PWM_VALUE - ESC_MIN_PWM_VALUE) + ESC_MIN_PWM_VALUE + GLOBAL_OFFSET;
    pwm3 = pilotCommandsShared.chan3*(ESC_MAX_PWM_VALUE - ESC_MIN_PWM_VALUE) + ESC_MIN_PWM_VALUE + GLOBAL_OFFSET;
    pwm4 = pilotCommandsShared.chan4*(ESC_MAX_PWM_VALUE - ESC_MIN_PWM_VALUE) + ESC_MIN_PWM_VALUE + GLOBAL_OFFSET;
    pwm5 = pilotCommandsShared.chan5*(ESC_MAX_PWM_VALUE - ESC_MIN_PWM_VALUE) + ESC_MIN_PWM_VALUE + GLOBAL_OFFSET;
    pwm6 = pilotCommandsShared.chan6*(ESC_MAX_PWM_VALUE - ESC_MIN_PWM_VALUE) + ESC_MIN_PWM_VALUE + GLOBAL_OFFSET;
    pwm7 = pilotCommandsShared.chan7*(ESC_MAX_PWM_VALUE - ESC_MIN_PWM_VALUE) + ESC_MIN_PWM_VALUE + GLOBAL_OFFSET;
    pwm8 = pilotCommandsShared.chan8*(ESC_MAX_PWM_VALUE - ESC_MIN_PWM_VALUE) + ESC_MIN_PWM_VALUE + GLOBAL_OFFSET;
    pwm9 = pilotCommandsShared.chan9*(ESC_MAX_PWM_VALUE - ESC_MIN_PWM_VALUE) + ESC_MIN_PWM_VALUE + GLOBAL_OFFSET;


        pwmWrite(PCA_PINBASE + 0, calcTicks(pwm1, PCA_FREQUENCY));
        pwmWrite(PCA_PINBASE + 1, calcTicks(pwm2, PCA_FREQUENCY));
        pwmWrite(PCA_PINBASE + 2, calcTicks(pwm3, PCA_FREQUENCY));
        pwmWrite(PCA_PINBASE + 3, calcTicks(pwm4, PCA_FREQUENCY));
        pwmWrite(PCA_PINBASE + 4, calcTicks(pwm5, PCA_FREQUENCY));
        pwmWrite(PCA_PINBASE + 5, calcTicks(pwm6, PCA_FREQUENCY));
        pwmWrite(PCA_PINBASE + 6, calcTicks(pwm7, PCA_FREQUENCY));
        pwmWrite(PCA_PINBASE + 7, calcTicks(pwm8, PCA_FREQUENCY));
        pwmWrite(PCA_PINBASE + 8, calcTicks(pwm9, PCA_FREQUENCY));


    pthread_mutex_unlock(&pilotCommandsShared.readWrite);
}

void* pilotHandler(void* arg)
{
    int previousLandTakeOffCommand = 0; // 0 : land 1 : takeoff

    // variables needed for the pilot test function :

    double testCommand = 0;
    int testCom = 0;

    // Handler global variables init :

    initialize_mutex(&pilotCommandsShared.readWrite);
    initialize_mutex(&pilotStateShared.readWriteMutex);

    pthread_mutex_lock(&pilotStateShared.readWriteMutex);
    pthread_mutex_lock(&pilotCommandsShared.readWrite);

    pilotStateShared.pilotMode = AUTO;


    pilotCommandsShared.chan1 = 0.5;
    pilotCommandsShared.chan2 = 0.5;
    pilotCommandsShared.chan3 = 0;
    pilotCommandsShared.chan4 = 0.5;
    pilotCommandsShared.chan5 = 0.5;
    pilotCommandsShared.chan6 = 0.5;
    pilotCommandsShared.chan7 = 0.5;
    pilotCommandsShared.chan8 = 0.5;
    pilotCommandsShared.chan9 = 0.5;





    pilotCommandsShared.refreshingPeriod = REFRESHING_PERIOD_DEFAULT;

    pthread_mutex_unlock(&pilotStateShared.readWriteMutex);
    pthread_mutex_unlock(&pilotCommandsShared.readWrite);


     // Disarming motors on startup to patch armed motors bug :
    disarmQuadcopter();


    bidirectionnalHandler_t* bidirectionnalHandler;
    bidirectionnalHandler = (bidirectionnalHandler_t*)arg;

    handler_t* mainITMHandler;
    handler_t* pilotITMHandler;

    mainITMHandler = bidirectionnalHandler->mainITMHandler;
    pilotITMHandler = bidirectionnalHandler->componentITMHandler;

    message_t* receivedMessage;
    message_t message;
    messageDecoded_t decoded;
    char* dataDecoded;

    // Notifying main thread of init :

    strcpy(message.message,"main_pilot_info_init");
    message.priority = 20;
    sendMessage(mainITMHandler, message);


    int fd = pca9685Setup(PCA_PINBASE, PCA_I2C_ADDRESS, PCA_FREQUENCY);
    if(fd <0)
    {
        strcpy(message.message,"main_pilot_info_initfailed");
        message.priority = 20;
        sendMessage(mainITMHandler, message);
        sleep(1);

        pthread_exit(NULL);
    }
    pca9685PWMReset(fd);
    sleep(2);

    armQuadcopter();

    strcpy(message.message,"main_pilot_info_endofinit");
    message.priority = 20;
    sendMessage(mainITMHandler, message);


    while(1)
    {


        receivedMessage =retrieveMessage(pilotITMHandler);
        if (receivedMessage == NULL)
        {
            //printDebug("[i] No message for pilot");
        }
        else
        {


            decoded = decodeMessageITM(receivedMessage);

            if (strcmp(decoded.destination,"pilot"))
            {
                printDebug("[e] pilot component received a message it should not");

            }

            else
            {
                if (decoded.operation == ORDER)
                {

                    if (!strcmp(decoded.message, "manual"))
                    {


                        printDebug("Pilot received a manual order, switching to manual and notifying main");
                        pthread_mutex_lock(&pilotStateShared.readWriteMutex);
                        pilotStateShared.pilotMode = MANUAL;
                        pthread_mutex_unlock(&pilotStateShared.readWriteMutex);
                        
                        strcpy(message.message, "main_pilot_info_usermanual");
                        sendMessage(mainITMHandler, message);

                    }
                    
                    if (!strcmp(decoded.message, "auto"))
                    {


                        printDebug("Pilot received an auto order, switching to manual and notifying main");
                        pthread_mutex_lock(&pilotStateShared.readWriteMutex);
                        pilotStateShared.pilotMode = AUTO;
                        pthread_mutex_unlock(&pilotStateShared.readWriteMutex);
                        
                        strcpy(message.message, "main_pilot_info_userauto");
                        sendMessage(mainITMHandler, message);
                    }




                    else if (!strcmp(decoded.message, "test"))
                    {

                        strcpy(message.message,"main_pilot_info_test");
                        sendMessage(mainITMHandler, message);


                        printDebug("Pilot received a test order, performing test");
                        pthread_mutex_lock(&pilotStateShared.readWriteMutex);
                        pilotStateShared.pilotMode = TEST;
                        pthread_mutex_unlock(&pilotStateShared.readWriteMutex);
                        strcpy(message.message, "autopilot_pilot_order_pause");
                        sendMessage(mainITMHandler, message);
                    }

                    else if (!strcmp(decoded.message, "arm"))
                    {
                        printDebug("[i] Received the order to arm motors, arming");
                        armQuadcopter();

                    }

                    else if (!strcmp(decoded.message, "disarm"))
                    {
                        printDebug("[i] Received the order to disarm motors, disarming");
                        disarmQuadcopter();
                    }

                    else if (!strcmp(decoded.message, "increasepwm"))
                    {
                        printDebug("[i] Increasing pwm...");
                        testCommand +=0.1;
                        printf("[i] PWM is now %f", testCommand);
                    }

                    else if (!strcmp(decoded.message, "decreasepwm"))
                    {
                        printDebug("[i] Decreasing pwm...");
                        testCommand -=0.1;
                        printf("[i] PWM is now %f", testCommand);
                    }

                    else if (!strcmp(decoded.message, "testcommands"))
                    {
                        if (!testCom)
                        {
                            printDebug("[i] Testing commands...");
                            testCom = 1;
                        }

                        else
                        {
                            printDebug("[i] Desactivating command test...");
                            testCom = 0;
                        }
                    }




                }

                else
                {
                    printDebug("Pilot received a message he was supposed to but didn't recognized it");
                }
            }

            free(receivedMessage);
        }


        // Response to user commands :

        pthread_mutex_lock(&receivedCommands.readWriteMutex);
        pthread_mutex_lock(&pilotStateShared.readWriteMutex);

        if (testCom) printf("LAND / TAKEOFF : %f\n", receivedCommands.commands[LAND_TAKEOFF_CHAN - 1]);
        if (testCom) printf("MANUAL / AUTO : %f\n", receivedCommands.commands[AUTO_MANUAL_CHAN - 1]);


        if (receivedCommands.commands[LAND_TAKEOFF_CHAN - 1] > 0.5 && pilotStateShared.pilotMode != MANUAL && !previousLandTakeOffCommand)
        {
            if (testCom) printDebug("[i] User requested takeoff, sending a takeoff order to autopilot");
            previousLandTakeOffCommand = 1;

            // Broadcasting order to main :
            strcpy(message.message, "main_pilot_info_usertakeoff");
            sendMessage(mainITMHandler, message);


        }

        else if (receivedCommands.commands[LAND_TAKEOFF_CHAN - 1] < 0.5 && pilotStateShared.pilotMode != MANUAL && previousLandTakeOffCommand)
        {
            if (testCom) printDebug("[i] User requested landing, sending a landing order to autopilot");
            previousLandTakeOffCommand = 0;

            // Broadcasting order to main :

            strcpy(message.message, "main_pilot_info_userland");
            sendMessage(mainITMHandler, message);
        }

        if (receivedCommands.commands[AUTO_MANUAL_CHAN - 1] > 0.5 && pilotStateShared.pilotMode != MANUAL)
        {
            if (testCom) printDebug("[i] User requested manual commands, giving user the drone control...");
            pilotStateShared.pilotMode = MANUAL;

            // Broadcasting order to main :

            strcpy(message.message, "main_pilot_info_usermanual");
            sendMessage(mainITMHandler, message);
        }

        else if (receivedCommands.commands[AUTO_MANUAL_CHAN - 1] < 0.5 && pilotStateShared.pilotMode != AUTO)
        {
            if (testCom) printDebug("[i] User requested autopilot to take control, giving autopilot the drone control...");
            pilotStateShared.pilotMode = AUTO;

            // Broadcasting order to main :

            strcpy(message.message, "main_pilot_info_userauto");
            sendMessage(mainITMHandler, message);
        }

        if (testCom)
        {
            fflush(stdout);
        }



        switch (pilotStateShared.pilotMode)
        {

        case MANUAL:

            pilotCommandsShared.chan1 =  receivedCommands.commands[0];
            pilotCommandsShared.chan2 =  receivedCommands.commands[1];
            pilotCommandsShared.chan3 =  receivedCommands.commands[2];
            pilotCommandsShared.chan4 =  receivedCommands.commands[3];

            break;


        case AUTO:

        // Doing nothing to commands : autopilot has control


            break;

        case TEST:

            // Some testing functions that increases and stops all channels

            pilotCommandsShared.chan1 =  testCommand;
            pilotCommandsShared.chan2 =  testCommand;
            pilotCommandsShared.chan3 =  testCommand;
            pilotCommandsShared.chan4 =  testCommand;

            if (testCommand >= 1) testCommand = 0;
            else testCommand += 0.01;
            usleep(1000000);


            break;

        }


        writeCommands();

        pthread_mutex_unlock(&receivedCommands.readWriteMutex);
        pthread_mutex_unlock(&pilotCommandsShared.readWrite);
        pthread_mutex_unlock(&pilotStateShared.readWriteMutex);




        if (testCom)
        {
            sleep(1);
        }

        else usleep(100000);




    }

}


